{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMSjn1B444H8Pd15qjuEUFT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Music Generation using LSTM model"],"metadata":{"id":"NiHvILEt8kL7"}},{"cell_type":"markdown","source":["## Creating the model"],"metadata":{"id":"VUodPMJl8pl8"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"I811Cg33qnQ_"},"outputs":[],"source":["# Importing librries\n","import glob\n","import numpy as np\n","import tensorflow as tf\n","from music21 import converter, instrument, note, chord        # music21 is used to interpret musical notes and data\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dropout, Dense\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","from tensorflow.keras.utils import to_categorical"]},{"cell_type":"code","source":["# Function to create the LSTM model\n","def create_lstm_model(input_shape, output_shape):\n","    model = Sequential()\n","    model.add(LSTM(256, input_shape=input_shape, return_sequences=True))\n","    model.add(Dropout(0.3))\n","    model.add(LSTM(512))\n","    model.add(Dropout(0.3))\n","    model.add(Dense(output_shape, activation='softmax'))\n","    return model"],"metadata":{"id":"0WNfrEC_qtBT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to preprocess the MIDI data\n","def preprocess_data(file_path):\n","    notes = []\n","    midi = converter.parse(file_path)\n","    notes_to_parse = None\n","    parts = instrument.partitionByInstrument(midi)\n","    if parts:  # File has instrument parts\n","        notes_to_parse = parts.parts[0].recurse()\n","    else:  # File has notes in a flat structure\n","        notes_to_parse = midi.flat.notes\n","    for element in notes_to_parse:\n","        if isinstance(element, note.Note):\n","            notes.append(str(element.pitch))\n","        elif isinstance(element, chord.Chord):\n","            notes.append('.'.join(str(n) for n in element.normalOrder))\n","    return notes"],"metadata":{"id":"llR60ULArlof"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to generate input and output sequences\n","def generate_sequences(notes, sequence_length):\n","    input_sequences = []\n","    output_sequences = []\n","    for i in range(len(notes) - sequence_length):\n","        input_sequence = notes[i:i + sequence_length]\n","        output_sequence = notes[i + sequence_length]\n","        input_sequences.append(input_sequence)\n","        output_sequences.append(output_sequence)\n","    return input_sequences, output_sequences\n"],"metadata":{"id":"_aQ8XcW6rx7I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Mounting the Drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"w_7EvRwswS20","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686381183545,"user_tz":-330,"elapsed":20580,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"outputId":"4713e69d-d30d-430b-d366-bde1d593b460"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Loading and preprocessing the MIDI files\n","\n","midi_files = glob.glob(\"/content/drive/MyDrive/EXTRAS/musicgen/midi_songs/*.mid\")\n","notes = []\n","for file in midi_files:\n","  notes += preprocess_data(file)"],"metadata":{"id":"E2myghP9sVda","executionInfo":{"status":"ok","timestamp":1686381336684,"user_tz":-330,"elapsed":106911,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4190676d-1a4e-411e-9205-8c69d45a493c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/music21/midi/translate.py:863: TranslateWarning: Unable to determine instrument from <music21.midi.MidiEvent SEQUENCE_TRACK_NAME, track=5, channel=None, data=b'Martin Rosok Copyright \\xa9 1998'>; getting generic Instrument\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/music21/midi/translate.py:863: TranslateWarning: Unable to determine instrument from <music21.midi.MidiEvent SEQUENCE_TRACK_NAME, track=6, channel=None, data=b'Pok\\xe9mon: Elite Four (Piano)'>; getting generic Instrument\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Checking if any MIDI files were found\n","if len(notes) == 0:                         # then attach a random pseudo examples\n","    print(\"No notes generated files appear to corrupted adding pseudo examples\")\n","    notes=['F4', 'F2', 'F4', 'G4', '0.3.5', 'A4', '0.3.5', 'B-4', 'B-2', 'C5', 'D5', '10.2.5', 'E-5', 'B-2', 'F5', 'G5', '3', 'A5', '3.7.10', '10.0', '10.0', '10.0', '10.0', 'A5', 'G5', '5.10', 'B-2', 'B-5', 'D5', '10.2.5', '10.2.5', '3.7', 'F2', 'G5', 'A4', '0.3.5', '0.3.5', '10.2', 'B-2', 'D5', 'E4', '10.2.5', '10.2.5', 'F4', 'F2', 'A4', 'C5', '3.5', 'E-5', 'G5']\n","else:\n","    print(\"Present\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hIiaZDFJRH3Y","executionInfo":{"status":"ok","timestamp":1686381341148,"user_tz":-330,"elapsed":413,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"outputId":"df438ea7-fb41-4f77-cabe-c118207ad0c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Present\n"]}]},{"cell_type":"code","source":["# Creating a vocabulary of unique notes\n","unique_notes = sorted(set(notes))\n","num_unique_notes = len(unique_notes)\n","print(unique_notes)"],"metadata":{"id":"7sbyk7Skt7lp","executionInfo":{"status":"ok","timestamp":1686381345452,"user_tz":-330,"elapsed":11,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2d248cb2-c6b8-4430-ddd6-b460dca26d45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['0', '0.1', '0.1.5', '0.2', '0.2.3.7', '0.2.4.5', '0.2.4.7', '0.2.5', '0.2.6', '0.2.7', '0.3', '0.3.5', '0.3.6', '0.3.6.8', '0.3.7', '0.4', '0.4.5', '0.4.6', '0.4.7', '0.5', '0.6', '1', '1.2', '1.2.4.6', '1.2.6', '1.3', '1.3.5', '1.3.6', '1.3.8', '1.4', '1.4.6', '1.4.6.9', '1.4.7', '1.4.7.10', '1.4.8', '1.5', '1.5.8', '1.5.9', '1.6', '1.7', '10', '10.0', '10.0.3', '10.0.4', '10.0.5', '10.1', '10.1.3', '10.1.4', '10.1.5', '10.11', '10.11.3', '10.2', '10.2.3', '10.2.4', '10.2.5', '10.3', '11', '11.0', '11.0.2.4', '11.0.4', '11.0.4.6', '11.0.5', '11.1', '11.1.2.4', '11.1.4', '11.1.5', '11.1.6', '11.2', '11.2.4', '11.2.4.7', '11.2.5', '11.2.5.7', '11.2.6', '11.3', '11.3.5', '11.3.6', '11.4', '11.4.5', '2', '2.3', '2.3.7', '2.3.7.10', '2.3.7.9', '2.4', '2.4.5.9', '2.4.6.7', '2.4.7', '2.4.8', '2.4.9', '2.5', '2.5.7', '2.5.7.10', '2.5.8', '2.5.9', '2.6', '2.6.10', '2.6.7', '2.6.7.9', '2.6.9', '2.7', '2.7.8', '2.8', '3', '3.4', '3.4.8', '3.4.8.10', '3.4.8.11', '3.5', '3.5.10', '3.5.7', '3.5.7.10', '3.5.7.8.11', '3.5.8', '3.6', '3.6.10', '3.6.7', '3.6.8', '3.6.8.11', '3.6.9.11', '3.7', '3.7.10', '3.7.11', '3.8', '3.8.9', '3.9', '4', '4.10', '4.5', '4.5.7.9', '4.5.9', '4.5.9.0', '4.5.9.11', '4.6', '4.6.10', '4.6.11', '4.6.7.9', '4.6.9', '4.7', '4.7.10', '4.7.11', '4.7.9', '4.7.9.0', '4.8', '4.8.10', '4.8.11', '4.8.9', '4.8.9.11', '4.9', '4.9.10', '5', '5.10', '5.11', '5.6', '5.6.8', '5.7', '5.7.0', '5.7.10', '5.7.8.0', '5.7.9.11', '5.8', '5.8.0', '5.8.10', '5.8.11', '5.9', '5.9.0', '5.9.11', '6', '6.10', '6.10.0', '6.10.1', '6.10.11', '6.11', '6.7', '6.7.0', '6.7.11', '6.7.11.2', '6.7.9.11', '6.8', '6.8.0', '6.8.1', '6.8.10', '6.8.11', '6.9', '6.9.0', '6.9.0.2', '6.9.1', '6.9.11', '6.9.11.1', '7', '7.0', '7.10', '7.10.0', '7.10.0.3', '7.10.1', '7.10.1.3', '7.10.2', '7.11', '7.11.0', '7.11.2', '7.8.0', '7.8.10.2', '7.8.11', '7.9', '7.9.0', '7.9.11', '7.9.11.0', '7.9.11.1', '7.9.2', '8', '8.0', '8.0.1', '8.0.2', '8.0.3', '8.1', '8.10', '8.10.0', '8.10.1', '8.10.11.3', '8.10.2', '8.10.3', '8.11', '8.11.1', '8.11.2', '8.11.3', '8.9', '8.9.1', '8.9.1.3', '8.9.11.1.3', '8.9.2', '9', '9.0', '9.0.2', '9.0.2.5', '9.0.3', '9.0.3.5', '9.0.4', '9.1', '9.1.4', '9.10', '9.10.2.4', '9.10.3', '9.11', '9.11.0.2', '9.11.0.4', '9.11.1', '9.11.1.2', '9.11.2', '9.11.2.4', '9.11.3', '9.11.4', '9.2', '9.2.3', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'B-1', 'B-2', 'B-3', 'B-4', 'B-5', 'B-6', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'C#1', 'C#2', 'C#3', 'C#4', 'C#5', 'C#6', 'C#7', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'E-1', 'E-2', 'E-3', 'E-4', 'E-5', 'E-6', 'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'F#1', 'F#2', 'F#3', 'F#4', 'F#5', 'F#6', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'G#1', 'G#2', 'G#3', 'G#4', 'G#5', 'G#6', 'G1', 'G2', 'G3', 'G4', 'G5', 'G6']\n"]}]},{"cell_type":"code","source":["# Creating input and output sequences\n","sequence_length = 10 # Adjust the sequence length as per your preference\n","input_sequences, output_sequences = generate_sequences(notes, sequence_length)\n"],"metadata":{"id":"MY9RUI3vskPZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Converting input and output sequences to numeric format\n","note_to_int = dict((note, number) for number, note in enumerate(unique_notes))\n","input_sequences_numeric = []\n","output_sequences_numeric = []\n","for input_seq, output_seq in zip(input_sequences, output_sequences):\n","    input_sequences_numeric.append([note_to_int[note] for note in input_seq])\n","    output_sequences_numeric.append(note_to_int[output_seq])\n","print(input_sequences_numeric)"],"metadata":{"id":"iqhvsZZUtQ65","executionInfo":{"status":"ok","timestamp":1686381360382,"user_tz":-330,"elapsed":2246,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"colab":{"base_uri":"https://localhost:8080/","output_embedded_package_id":"1Mm3dit5l9iZCELhY97REcl4XNlNVbcbK"},"outputId":"1c0fd854-7b04-45ae-bc74-655ad9395035"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["# Checking if input sequences are empty\n","if len(input_sequences_numeric) == 0:\n","    print(\"No input sequences found. Please check your MIDI files or adjust the sequence length.\")\n"],"metadata":{"id":"uj4dFcg4VPYu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Converting input and output sequences to numpy arrays\n","input_sequences_numeric = np.array(input_sequences_numeric)\n","output_sequences_numeric = np.array(output_sequences_numeric)\n"],"metadata":{"id":"Rr2kqSThtxzT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Defining the input and output shapes for the LSTM model\n","input_shape = (sequence_length, num_unique_notes)  # Replace with your desired values\n","output_shape = num_unique_notes  # Replace with your desired number of unique notes\n"],"metadata":{"id":"l20SDTJPu7PM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Normalizing input sequences\n","input_sequences_normalized = input_sequences_numeric / float(num_unique_notes)\n"],"metadata":{"id":"-KVaA5HuuEaD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Training using Distributed Training"],"metadata":{"id":"KZXGUsMT9Y-x"}},{"cell_type":"code","source":["# Defining the MirroredStrategy for distributed training\n","strategy = tf.distribute.MirroredStrategy()"],"metadata":{"id":"dMZ5yMv6vM5z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Input reshape for LSTM layer\n","input_shape = (sequence_length, 1)\n","\n","# Reshaping input sequences\n","input_sequences_normalized = np.expand_dims(input_sequences_normalized, axis=2)"],"metadata":{"id":"hJsBjlkUOUQM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Creating the LSTM model within the MirroredStrategy scope\n","with strategy.scope():\n","    model = create_lstm_model(input_shape, output_shape)\n","    model.compile(loss='categorical_crossentropy', optimizer=Adam())"],"metadata":{"id":"9gQ2pw14vRo0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Defining the model checkpoint to save the best model during training\n","checkpoint = ModelCheckpoint('model.h5', monitor='loss', verbose=0, save_best_only=True, mode='min')\n"],"metadata":{"id":"p4GcApmTvUMd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Training the model\n","model.fit(input_sequences_normalized, to_categorical(output_sequences_numeric),\n","          epochs=50, batch_size=64, callbacks=[checkpoint])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vm_5VI-RvfvD","executionInfo":{"status":"ok","timestamp":1686382782976,"user_tz":-330,"elapsed":327183,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"outputId":"ab72c266-5053-4d5e-c80f-1d2434eee9b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","719/719 [==============================] - 16s 9ms/step - loss: 4.6082\n","Epoch 2/50\n","719/719 [==============================] - 7s 9ms/step - loss: 4.5039\n","Epoch 3/50\n","719/719 [==============================] - 7s 9ms/step - loss: 4.4781\n","Epoch 4/50\n","719/719 [==============================] - 7s 9ms/step - loss: 4.4543\n","Epoch 5/50\n","719/719 [==============================] - 6s 8ms/step - loss: 4.4122\n","Epoch 6/50\n","719/719 [==============================] - 7s 9ms/step - loss: 4.3357\n","Epoch 7/50\n","719/719 [==============================] - 6s 8ms/step - loss: 4.2271\n","Epoch 8/50\n","719/719 [==============================] - 8s 12ms/step - loss: 4.0980\n","Epoch 9/50\n","719/719 [==============================] - 6s 8ms/step - loss: 3.9410\n","Epoch 10/50\n","719/719 [==============================] - 6s 8ms/step - loss: 3.7507\n","Epoch 11/50\n","719/719 [==============================] - 6s 9ms/step - loss: 3.5682\n","Epoch 12/50\n","719/719 [==============================] - 6s 8ms/step - loss: 3.3759\n","Epoch 13/50\n","719/719 [==============================] - 7s 10ms/step - loss: 3.1911\n","Epoch 14/50\n","719/719 [==============================] - 6s 8ms/step - loss: 3.0241\n","Epoch 15/50\n","719/719 [==============================] - 7s 9ms/step - loss: 2.8487\n","Epoch 16/50\n","719/719 [==============================] - 6s 8ms/step - loss: 2.6901\n","Epoch 17/50\n","719/719 [==============================] - 7s 9ms/step - loss: 2.5452\n","Epoch 18/50\n","719/719 [==============================] - 6s 8ms/step - loss: 2.3947\n","Epoch 19/50\n","719/719 [==============================] - 6s 9ms/step - loss: 2.2614\n","Epoch 20/50\n","719/719 [==============================] - 6s 8ms/step - loss: 2.1456\n","Epoch 21/50\n","719/719 [==============================] - 6s 8ms/step - loss: 2.0185\n","Epoch 22/50\n","719/719 [==============================] - 7s 9ms/step - loss: 1.9041\n","Epoch 23/50\n","719/719 [==============================] - 6s 8ms/step - loss: 1.8071\n","Epoch 24/50\n","719/719 [==============================] - 7s 9ms/step - loss: 1.6917\n","Epoch 25/50\n","719/719 [==============================] - 6s 8ms/step - loss: 1.6081\n","Epoch 26/50\n","719/719 [==============================] - 7s 9ms/step - loss: 1.5273\n","Epoch 27/50\n","719/719 [==============================] - 6s 8ms/step - loss: 1.4403\n","Epoch 28/50\n","719/719 [==============================] - 7s 9ms/step - loss: 1.3588\n","Epoch 29/50\n","719/719 [==============================] - 6s 8ms/step - loss: 1.2949\n","Epoch 30/50\n","719/719 [==============================] - 6s 8ms/step - loss: 1.2186\n","Epoch 31/50\n","719/719 [==============================] - 6s 9ms/step - loss: 1.1561\n","Epoch 32/50\n","719/719 [==============================] - 6s 8ms/step - loss: 1.1051\n","Epoch 33/50\n","719/719 [==============================] - 7s 9ms/step - loss: 1.0490\n","Epoch 34/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.9988\n","Epoch 35/50\n","719/719 [==============================] - 7s 9ms/step - loss: 0.9500\n","Epoch 36/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.9048\n","Epoch 37/50\n","719/719 [==============================] - 7s 10ms/step - loss: 0.8733\n","Epoch 38/50\n","719/719 [==============================] - 7s 9ms/step - loss: 0.8233\n","Epoch 39/50\n","719/719 [==============================] - 6s 9ms/step - loss: 0.8050\n","Epoch 40/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.7742\n","Epoch 41/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.7408\n","Epoch 42/50\n","719/719 [==============================] - 7s 9ms/step - loss: 0.7187\n","Epoch 43/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.6924\n","Epoch 44/50\n","719/719 [==============================] - 7s 9ms/step - loss: 0.6578\n","Epoch 45/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.6511\n","Epoch 46/50\n","719/719 [==============================] - 7s 9ms/step - loss: 0.6218\n","Epoch 47/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.6089\n","Epoch 48/50\n","719/719 [==============================] - 6s 9ms/step - loss: 0.5927\n","Epoch 49/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.5911\n","Epoch 50/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.5506\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fcf137e71c0>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":[" # Loading the best model for generating music\n","with strategy.scope():\n","    model = tf.keras.models.load_model('model.h5')\n"],"metadata":{"id":"zFt-dC97vn3K"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Generation of Music"],"metadata":{"id":"-rMYV3B99rHQ"}},{"cell_type":"code","source":["# Generating music using the trained model\n","start_sequence = input_sequences_normalized[np.random.randint(0, len(input_sequences_normalized) - 1)]\n","generated_notes = []\n","for i in range(500):  # Adjust the number of notes to generate as per your preference\n","    input_sequence = np.reshape(start_sequence, (1, len(start_sequence), 1))\n","    prediction = model.predict(input_sequence, verbose=0)\n","    index = np.argmax(prediction)\n","    generated_note = unique_notes[index]\n","    generated_notes.append(generated_note)\n","    start_sequence = np.append(start_sequence, index / float(num_unique_notes))\n","    start_sequence = start_sequence[1:]\n"],"metadata":{"id":"7H1BHP5dvxzy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Viewing the generated notes\n","print(generated_notes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YSKvH94qQyaU","executionInfo":{"status":"ok","timestamp":1686383053233,"user_tz":-330,"elapsed":8,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"outputId":"37a055f8-c7ca-40f8-e612-6d64bcc61f3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['B4', 'E4', 'F5', 'F#5', 'G5', 'G#5', 'D4', 'B4', 'G3', 'C3', 'B4', 'A5', 'E5', 'C#5', 'B-2', 'F4', 'G4', 'A4', 'B2', 'B2', 'F#3', 'D3', 'G2', 'F#2', 'F#5', 'F5', 'G4', 'E3', 'B-4', 'F3', 'C5', 'F#3', 'C#5', 'F3', 'C#3', 'A5', 'D4', 'B2', 'F#3', 'C4', 'B-4', 'B3', 'E-3', 'G3', 'E4', 'G4', 'F#5', 'B4', 'G4', 'C5', 'A5', 'D4', 'G4', 'F#4', 'G4', 'B-4', 'C5', 'B4', 'B4', 'C#5', 'B-5', 'B-3', 'C#2', 'G#5', 'C5', 'F#5', 'G#4', 'C#5', 'C#5', 'G3', 'G2', 'E4', 'A2', 'C5', 'E4', 'C6', 'C#4', 'C3', 'E4', 'F4', 'B-3', 'B4', 'F#3', 'D4', 'G4', 'C#3', 'F#5', 'C#4', '2.6', 'D4', 'F#4', 'G#4', 'G#4', 'G#4', 'G4', 'G#4', 'E4', 'G5', 'F2', 'G4', 'G#5', 'F3', 'E-5', 'F5', 'F5', 'F5', 'G4', 'F5', 'B-2', 'E5', 'A3', 'F2', 'G#5', 'F3', 'D5', 'G2', 'G3', 'C5', 'G2', 'G3', 'C5', 'G2', 'G3', 'F5', 'G2', 'F2', 'F5', 'G5', 'F5', 'G2', 'G4', 'B-2', 'G2', 'G#2', 'G2', 'F4', 'F2', 'B-5', '7.0', 'G#4', '7.0', 'G#4', 'E-5', 'G#4', 'D5', 'E-5', 'G5', 'F5', 'G5', 'B-5', 'G#5', 'B-5', 'G#4', 'G5', 'F5', 'G5', 'E-5', 'B-2', 'E-5', 'F4', 'G2', 'A4', 'G5', 'G4', 'E-3', 'D4', 'G5', 'F5', 'C4', 'A4', 'G6', 'A3', 'D6', 'B3', 'A4', 'E5', 'D3', 'F#4', 'G3', 'A3', 'D5', 'E-3', 'E-5', 'E4', 'A5', 'A2', 'G4', 'C5', 'G3', 'G4', 'A4', 'A4', 'G4', 'G3', 'A4', 'F#4', 'B3', 'G4', 'A3', 'D6', 'A2', 'D3', 'B3', 'F4', 'B-3', 'A4', 'A2', 'G3', 'A2', 'E4', 'B-3', 'E5', 'A2', 'A4', 'A2', 'A1', 'C5', 'A2', 'A2', 'A2', 'A2', 'A3', 'A2', 'E-3', 'A2', '9.2', 'A5', 'A1', 'A5', 'A2', 'G5', 'A2', '9.2', 'A5', 'A5', 'A5', 'A2', 'A2', 'B-5', 'A2', 'A1', 'A2', 'A1', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2']\n"]}]},{"cell_type":"code","source":["from music21 import stream, note, chord\n","\n","# Creating a Music21 stream to store the generated notes\n","output_stream = stream.Stream()\n","\n"," # Iterating over the generated notes\n","for note_string in generated_notes:\n","    # Skiping empty strings\n","    if note_string == '':\n","        continue\n","    \n","    # Checking if the note is a chord\n","    if '.' in note_string:\n","      \n","        chord_notes = note_string.split('.')\n","        try:\n","          chord_obj = chord.Chord(chord_notes)\n","        except:\n","          continue\n","        output_stream.append(chord_obj)\n","    else:\n","        note_obj = note.Note(note_string)\n","        output_stream.append(note_obj)\n","\n","# Writing the output stream to a MIDI file\n","output_stream.write('midi', fp='output.mid')"],"metadata":{"id":"9Hxj8vzPv1F_","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1686384502410,"user_tz":-330,"elapsed":1249,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"outputId":"3cb87377-15b3-482f-94d2-f0000a979a81"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'output.mid'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# Installing dependencies\n","!pip install midi2audio\n","!pip install fluidsynth"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v_wTf_jsQr82","executionInfo":{"status":"ok","timestamp":1686384704243,"user_tz":-330,"elapsed":9449,"user":{"displayName":"VARUN KUKRETI","userId":"17317859266623597878"}},"outputId":"8407e0fd-6909-4f20-d6a8-40fb2f401e20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: midi2audio in /usr/local/lib/python3.10/dist-packages (0.1.1)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting fluidsynth\n","  Downloading fluidsynth-0.2.tar.gz (3.7 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: fluidsynth\n","  Building wheel for fluidsynth (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for fluidsynth: filename=fluidsynth-0.2-py3-none-any.whl size=4488 sha256=cfff39e724539d3323a6cf856f98e663da59fcf7318c6db216e80be5a4dd7f30\n","  Stored in directory: /root/.cache/pip/wheels/72/5a/bf/347b142f199fb1bea87f16f8970916226951bc359c947ba19b\n","Successfully built fluidsynth\n","Installing collected packages: fluidsynth\n","Successfully installed fluidsynth-0.2\n"]}]},{"cell_type":"code","source":["# Importing needed files\n","import os\n","from midi2audio import FluidSynth\n","from IPython.display import Audio\n","\n","# Converting MIDI to WAV using FluidSynth\n","midi_file = '/content/output.mid'\n","output_wav = 'output.wav'\n","FluidSynth().midi_to_audio(midi_file, output_wav)\n","\n","# Playing the audio file\n","Audio(output_wav)"],"metadata":{"id":"wyz0xWYZWjnN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_dH8zsJUW1uI"},"execution_count":null,"outputs":[]}]}